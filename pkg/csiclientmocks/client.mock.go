// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/container-storage-interface/spec/lib/go/csi (interfaces: SnapshotMetadataClient,SnapshotMetadata_GetMetadataAllocatedClient,SnapshotMetadata_GetMetadataDeltaClient)

// Package csiclientmocks is a generated GoMock package.
package csiclientmocks

import (
	context "context"
	reflect "reflect"

	csi "github.com/container-storage-interface/spec/lib/go/csi"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockSnapshotMetadataClient is a mock of SnapshotMetadataClient interface.
type MockSnapshotMetadataClient struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMetadataClientMockRecorder
}

// MockSnapshotMetadataClientMockRecorder is the mock recorder for MockSnapshotMetadataClient.
type MockSnapshotMetadataClientMockRecorder struct {
	mock *MockSnapshotMetadataClient
}

// NewMockSnapshotMetadataClient creates a new mock instance.
func NewMockSnapshotMetadataClient(ctrl *gomock.Controller) *MockSnapshotMetadataClient {
	mock := &MockSnapshotMetadataClient{ctrl: ctrl}
	mock.recorder = &MockSnapshotMetadataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotMetadataClient) EXPECT() *MockSnapshotMetadataClientMockRecorder {
	return m.recorder
}

// GetMetadataAllocated mocks base method.
func (m *MockSnapshotMetadataClient) GetMetadataAllocated(arg0 context.Context, arg1 *csi.GetMetadataAllocatedRequest, arg2 ...grpc.CallOption) (csi.SnapshotMetadata_GetMetadataAllocatedClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetadataAllocated", varargs...)
	ret0, _ := ret[0].(csi.SnapshotMetadata_GetMetadataAllocatedClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataAllocated indicates an expected call of GetMetadataAllocated.
func (mr *MockSnapshotMetadataClientMockRecorder) GetMetadataAllocated(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataAllocated", reflect.TypeOf((*MockSnapshotMetadataClient)(nil).GetMetadataAllocated), varargs...)
}

// GetMetadataDelta mocks base method.
func (m *MockSnapshotMetadataClient) GetMetadataDelta(arg0 context.Context, arg1 *csi.GetMetadataDeltaRequest, arg2 ...grpc.CallOption) (csi.SnapshotMetadata_GetMetadataDeltaClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetadataDelta", varargs...)
	ret0, _ := ret[0].(csi.SnapshotMetadata_GetMetadataDeltaClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataDelta indicates an expected call of GetMetadataDelta.
func (mr *MockSnapshotMetadataClientMockRecorder) GetMetadataDelta(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataDelta", reflect.TypeOf((*MockSnapshotMetadataClient)(nil).GetMetadataDelta), varargs...)
}

// MockSnapshotMetadata_GetMetadataAllocatedClient is a mock of SnapshotMetadata_GetMetadataAllocatedClient interface.
type MockSnapshotMetadata_GetMetadataAllocatedClient struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder
}

// MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder is the mock recorder for MockSnapshotMetadata_GetMetadataAllocatedClient.
type MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder struct {
	mock *MockSnapshotMetadata_GetMetadataAllocatedClient
}

// NewMockSnapshotMetadata_GetMetadataAllocatedClient creates a new mock instance.
func NewMockSnapshotMetadata_GetMetadataAllocatedClient(ctrl *gomock.Controller) *MockSnapshotMetadata_GetMetadataAllocatedClient {
	mock := &MockSnapshotMetadata_GetMetadataAllocatedClient{ctrl: ctrl}
	mock.recorder = &MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotMetadata_GetMetadataAllocatedClient) EXPECT() *MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSnapshotMetadata_GetMetadataAllocatedClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataAllocatedClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSnapshotMetadata_GetMetadataAllocatedClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataAllocatedClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSnapshotMetadata_GetMetadataAllocatedClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataAllocatedClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSnapshotMetadata_GetMetadataAllocatedClient) Recv() (*csi.GetMetadataAllocatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*csi.GetMetadataAllocatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataAllocatedClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockSnapshotMetadata_GetMetadataAllocatedClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataAllocatedClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockSnapshotMetadata_GetMetadataAllocatedClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataAllocatedClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockSnapshotMetadata_GetMetadataAllocatedClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSnapshotMetadata_GetMetadataAllocatedClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataAllocatedClient)(nil).Trailer))
}

// MockSnapshotMetadata_GetMetadataDeltaClient is a mock of SnapshotMetadata_GetMetadataDeltaClient interface.
type MockSnapshotMetadata_GetMetadataDeltaClient struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder
}

// MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder is the mock recorder for MockSnapshotMetadata_GetMetadataDeltaClient.
type MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder struct {
	mock *MockSnapshotMetadata_GetMetadataDeltaClient
}

// NewMockSnapshotMetadata_GetMetadataDeltaClient creates a new mock instance.
func NewMockSnapshotMetadata_GetMetadataDeltaClient(ctrl *gomock.Controller) *MockSnapshotMetadata_GetMetadataDeltaClient {
	mock := &MockSnapshotMetadata_GetMetadataDeltaClient{ctrl: ctrl}
	mock.recorder = &MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotMetadata_GetMetadataDeltaClient) EXPECT() *MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSnapshotMetadata_GetMetadataDeltaClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataDeltaClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSnapshotMetadata_GetMetadataDeltaClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataDeltaClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSnapshotMetadata_GetMetadataDeltaClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataDeltaClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSnapshotMetadata_GetMetadataDeltaClient) Recv() (*csi.GetMetadataDeltaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*csi.GetMetadataDeltaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataDeltaClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockSnapshotMetadata_GetMetadataDeltaClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataDeltaClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockSnapshotMetadata_GetMetadataDeltaClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataDeltaClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockSnapshotMetadata_GetMetadataDeltaClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSnapshotMetadata_GetMetadataDeltaClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSnapshotMetadata_GetMetadataDeltaClient)(nil).Trailer))
}
